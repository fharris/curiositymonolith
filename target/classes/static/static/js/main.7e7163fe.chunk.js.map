{"version":3,"sources":["services/ApiClient.js","components/LastQueryPageComponent.js","components/CuriosityComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","user","query","originalQuery","fetch","GET_PAGE","GET_TOPICS","userName","console","log","GET_STATS","LastQueryPageComponent","this","props","queryPageList","map","a","id","React","ChallengeComponent","state","message","queryTopics","curiosityUrl","topic1","topic2","topic3","handleSubmitGetCuriosity","bind","handleChange","handleSubmitGetPages","topic","curiosity","then","res","ok","updateMessage","json","setState","title","keyUrl","updateLastQueryPages","alert","event","name","target","value","m","preventDefault","getTopics","Object","keys","pages","pagesIdArray","getStats","querypage","data","forEach","item","push","theme","blue","default","hover","green","pink","Button","styled","button","defaultProps","onSubmit","type","maxLength","onChange","onClick","width","height","src","App","CuriosityComponent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e7163fe.chunk.js","sourcesContent":["class ApiClient {\n\n\n    // Build FrontEnd\n    // npm run build\n    // As the frontend is going to run statically in the Curiosity application, no references to Servers are needed. \n\n    static GET_PAGE = '/wiki/curiosity/page';\n\n    static GET_TOPICS = '/wiki/curiosity/topics'; \n\n    static GET_STATS = '/wiki/curiosity/stats?userName=';\n\n\n    static curiosity(user: string,\n                     query: string,\n                     originalQuery: string): Promise<Response> {\n\n        return fetch(ApiClient.GET_PAGE + \"/\" + user + \"/\" + query + \"/\" + originalQuery ); \n    }\n\n    static getTopics(user: string,\n                     query: string): Promise<Response> {\n\n        return fetch(ApiClient.GET_TOPICS + \"/\" + user + \"/\" + query); \n    }\n\n    static getStats(userName: string): Promise<Response> {\n\n        console.log(\"userName for Stats :\"+userName);\n\n         return fetch(ApiClient.GET_STATS + userName); \n    }\n    \n\n}\n\nexport default ApiClient;\n","import * as React from 'react';\n\nclass LastQueryPageComponent extends React.Component {\n\n    render() {\n        return (\n            <table>\n                <thead>\n                <tr>\n                 \n                    <th>Original Query</th>\n                    <th>Query</th>\n                </tr>\n                </thead>\n                <tbody>\n                 {this.props.queryPageList.map(a =>\n                    <tr key={a.id}>\n         \n                        <td>{a.originalQuery}</td>\n                        <td>{a.query}</td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default LastQueryPageComponent;","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport ApiClient from \"../services/ApiClient\";\nimport LastQueryPageComponent from './LastQueryPageComponent';\n\n\n\nclass ChallengeComponent extends React.Component {\n  \n    \n\n    constructor(props) {\n        super(props);\n        this.state = {\n          \n            user: '',\n            message: 'I want to know about...',\n            query: '?',\n            queryTopics: '',\n            originalQuery: 'OldValueDude',\n            curiosityUrl: 'https://www.wikipedia.org/',\n            topic1: '',\n            topic2: '',\n            topic3: '',\n            queryPageList: []\n        };\n\n        this.handleSubmitGetCuriosity = this.handleSubmitGetCuriosity.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmitGetPages = this.handleSubmitGetPages.bind(this);\n    }\n\n\n    \n    componentDidMount(): void {\n   \n    }\n\n\n    handleSubmitGetCuriosity(topic: string, user: string, originalQuery: string) {\n        //get page\n        //this.state.originalQuery = this.state.query;\n         ApiClient.curiosity(user, topic, originalQuery).then(\n            res => {\n                if (res.ok) {\n                    this.updateMessage(\"Oki! Here you have all you need to know about...\");\n                    res.json().then(json => {\n                        this.setState({\n                            //originalQuery: this.state.query,\n                            query: json.title, \n                            curiosityUrl: json.keyUrl             \n                        });\n                    });\n                    this.updateLastQueryPages(this.state.user);\n                    } else {\n                        alert(\"Ups! I have a little problem!\");\n                        this.updateMessage(\"Can't reach the server - Res in NoK! Make sure you have nickname!\");\n                }\n            }\n        ); \n        \n    }\n\n    handleChange(event) {\n        const name = event.target.name;\n        this.setState({\n            [name]: event.target.value\n        });\n    }\n\n\n    updateMessage(m: string) {\n        this.setState({\n          message: m\n        });\n    }\n\n    handleSubmitGetPages(event) {\n        event.preventDefault();\n        ApiClient.getTopics(this.state.user,this.state.query).then(\n            res => {\n                if (res.ok) {\n                    this.updateMessage(\"There are a few articles available for your curiosity\");\n                    res.json().then(json => {\n                        console.log(Object.keys(json.query.pages));\n                        const pagesIdArray = Object.keys(json.query.pages);\n                        this.setState({\n                            originalQuery: this.state.query,\n                            topic1: json.query.pages[pagesIdArray[0]].title, \n                            topic2: json.query.pages[pagesIdArray[1]].title,\n                            topic3: json.query.pages[pagesIdArray[2]].title\n                        });\n                    });\n                    this.updateLastQueryPages(this.state.user);\n                    } else {\n                        alert(\"Ups! I have a little problem!\");\n                        this.updateMessage(\"Please make sure you have nickname or a proper query\");\n                  \n                }\n\n            }\n        ); \n    }\n\n    updateLastQueryPages(userName: string) {\n        ApiClient.getStats(userName).then(res => {\n            if (res.ok) {\n                let querypage: QueryPage[] = [];\n                res.json().then(data => {\n                    data.forEach(item => {\n                        querypage.push(item);\n                    });\n                    this.setState({\n                        queryPageList: querypage\n                    });\n                })\n            }\n        })\n    }\n\n    render() {\n        \n    const theme = {\n        blue: {\n            default: \"#3f51b5\",\n            hover: \"#283593\"\n        },\n        green: {\n            default: \"#d4e157\",\n            hover: \"#616b57\"\n        },\n        pink: {\n            default: \"#e91e63\",\n            hover: \"#ad1457\"\n        }\n    };\n\n    const Button = styled.button`\n    background-color: ${(props) => theme[props.theme].default};\n    color: white;\n    padding: 5px 15px;\n    border-radius: 5px;\n    outline: 0;\n    text-transform: uppercase;\n    margin: 10px 0px;\n    cursor: pointer;\n    box-shadow: 0px 2px 2px lightgray;\n    transition: ease background-color 250ms;\n    &:hover {\n        background-color: ${(props) => theme[props.theme].hover};\n    }\n    &:disabled {\n        cursor: default;\n        opacity: 0.7;\n    }\n    `;\n\n    Button.defaultProps = {\n    theme: \"blue\"\n    };\n\n        \n        return (\n           \n            <div>\n     \n\n                <h1>WikipediA CuriositieS</h1>\n                <h5>{this.state.message}</h5>\n                \n                <div>\n                    <h2>\n                        {this.state.query}\n                    </h2>\n                </div>\n                <form onSubmit={this.handleSubmitGetPages}>\n                    <label>\n                        Name:\n                        <input type=\"text\" maxLength=\"24\"\n                               name=\"user\"\n                               value={this.state.user}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    <label>\n                        Query:\n                        <input type=\"text\" maxLength=\"24\"\n                               name=\"query\"\n                               value={this.state.query}\n                               onChange={this.handleChange}/>\n                    </label>\n                    <br/>\n                    \n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n\n                <div>\n                    <h3>Available Articles</h3>\n                    <h3>\n                     <Button onClick={() => this.handleSubmitGetCuriosity(this.state.topic1, this.state.user, this.state.originalQuery)}> {this.state.topic1} </Button>              \n                     <Button theme=\"pink\" onClick={() => this.handleSubmitGetCuriosity(this.state.topic2, this.state.user, this.state.originalQuery)}> {this.state.topic2} </Button>\n                     <Button theme=\"green\" onClick={() => this.handleSubmitGetCuriosity(this.state.topic3, this.state.user, this.state.originalQuery)}> {this.state.topic3} </Button>\n                      </h3>\n                </div>\n              \n              \n                   <div>   \n                    <iframe width=\"100%\" height=\"400\" src={this.state.curiosityUrl} title=\"Wikipedia Page\"></iframe>\n                </div>\n                 <div>  \n                    <LastQueryPageComponent queryPageList={this.state.queryPageList}/>\n              </div>\n\n            </div>\n            \n            \n        );\n    \n        \n    \n    }\n    \n}\n\n\nexport default ChallengeComponent;","import React from 'react';\nimport './App.css';\nimport CuriosityComponent from './components/CuriosityComponent';\n\n\nfunction App() {\n    return <CuriosityComponent/>;\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}